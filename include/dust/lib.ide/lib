# vim: et ft=scala ts=4 sw=4

include ../lib.ux/lib;

def _target_path  = _.lib.ide/target_path;
def _context_path = _.lib.ide/context_path;

def ide::target_path =
    p $_target_path / $args;

def ide::list_lib = {
    !find $_target_path -type f -print0
}

def ide::list_func = {
    src lib = !cat $_context_path;
    src lib = !tr <$lib -d "\n";

    !xsi-list-func $lib
}

def ide::set_ctx = {
    src ctx_dir = dirname $_context_path;

    ux::begin "Creating context dir" "" $ctx_dir;
    !mkdir -p $ctx_dir;
    ux::ok "Creating context dir" "" $ctx_dir;

    src ctx = p $args;
    src ctx_ = clone $ctx;

    ux::begin "Setting context" $ctx $_context_path;
    !xs-write_in <$ctx_ $_context_path;
    ux::ok "Setting context" $ctx $_context_path;
}

def ide::compile = {
    let source_path = p $args;
    let dest_path = p $_target_path / $args;

    src _ = !dirname $dest_path;
    src dest_dir = !tr <$_ -d "\n";

    ux::begin Compiling $source_path $dest_path;

    !mkdir -p $dest_dir;
    !xs-compile $source_path $dest_path;

    ux::ok compiling $source_path $dest_path;
}

def ide::fzf = {
    src header = arg_get 1 $args;
    src prompt = arg_get 2 $args;
    src opts64 = arg_get 3 $args;

    src opts = !base64 <$opts64 -d;

    !fzf <$opts
        --height "100%"
        --layout=reverse
        --border=sharp
        "--margin=15%"
        "--padding=5%"
        --info=default
        "--prompt" $prompt
        "--pointer=>|"
        "--marker=.|"
        --header $header
        --ansi
        --tabstop=4
        --color=light
        --read0
        --print0
}

def ide::select_func = {
    src funcs0 = ide::list_func;
    src funcs64 = !base64 <$funcs0 --wrap=0;

    ide::fzf
        "Welcome, to the future."
        "Select function: "
        $funcs64
}

def ide::select_ctx = {
    def libs0 = ide::list_lib;
    def libs64 = !base64 <$libs0 --wrap=0;

    let ctx = ide::fzf
        "Welcome, to the future."
        "Select a library: "
        $libs64;
    src ctx = !tr <$ctx -d "\000";
    # !ruby <$ctx -e "p STDIN.read";

    ide::set_ctx $ctx;
}

def ide::show_ctx = {
    !cat $_context_path
}

def ide::call_command = {
    src _ = ide::select_func;
    src func = !tr <$_ -d "\000";

    src ctx = ide::show_ctx;

    join xs-call $ctx $func
}

include ./dusk;
