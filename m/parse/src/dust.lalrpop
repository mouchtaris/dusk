// vim: et ts=4 sw=4
grammar<'input>;
use super::{Error, lex::Tok};

pub Module: ast::Module<'input> =
    Block => (<>,).into()
;

Item: ast::Item<'input> = {
    <Expr> ";" => <>.into(),
    ";" => ast::Item::Empty(<_>::default()),
    "let" <Ident> "=" <Expr> ";" => ast::Item::LetStmt((<>,).into()),
    "val" <Ident> "=" <Expr> ";" => ast::Item::LetStmt((<>,).into()),
    "def" <Ident> "=" <Body> => ast::Item::DefStmt((<>,).into()),
}

Expr: ast::Expr<'input> = {
    <String> => <>.into(),
    <Natural> => <>.into(),
    <Invocation> => <>.into(),
}

pub Invocation: ast::Invocation<'input> = {
    DocComment*
    InvocationTarget
    InvocationCwd?
    InvocationRedirection*
    InvocationEnv*
    InvocationArg*
    => (<>).into(),
}
InvocationTarget: ast::InvocationTarget<'input> = {
    Ident => ast::InvocationTarget::InvocationTargetLocal((<>,).into()),
    "!" <Ident> => ast::InvocationTarget::InvocationTargetSystemName((<>,).into()),
    Path => ast::InvocationTarget::InvocationTargetSystemPath((<>,).into()),
}
InvocationArg: ast::InvocationArg<'input> = {
    Ident => <>.into(),
    Word => <>.into(),
    Opt => <>.into(),
    Path => <>.into(),
    String => <>.into(),
    Variable => <>.into(),
    Natural => <>.into(),
}
InvocationCwd: ast::Path<'input> = "@" <Path>;
InvocationEnv: ast::InvocationEnv<'input> = <IDENT_NO_EQ> "=" <InvocationArg>;

InvocationRedirection: ast::InvocationRedirection<'input> = {
    "<" <Redirect> => ast::RedirectInput((<>,)).into(),
    ">" <Redirect> => ast::RedirectOutput((<>,)).into(),
}

Redirect: ast::Redirect<'input> = {
    Path => <>.into(),
    Variable => <>.into(),
}

Opt: ast::Opt<'input> = {
    ShortOpt => <>.into(),
    LongOpt => <>.into(),
}
Path: ast::Path<'input> = {
    AbsPath => <>.into(),
    RelPath => <>.into(),
    HomePath => <>.into(),
}

Variable: ast::Variable<'input> = {
    "$" <Ident> => (<>,).into(),
}

Body: ast::Body<'input> = {
    <Expr> ";" => ast::Block((<_>::default(), <>)).into(),
    "{" <Block> "}" => <>.into(),
}

Block: ast::Block<'input> = {
    <Item*> <Expr> => ((<>,)).into(),
}


DocComment: ast::Text<'input> = DOC_COMMENT;
IdentSimple: ast::Ident<'input> = IDENT;
IdentNeq: ast::Ident<'input> = IDENT_NO_EQ;
Ident: ast::Ident<'input> = { IdentSimple, IdentNeq };
Word: ast::Word<'input> = WORD => (<>,).into();
String: ast::String<'input> = {
    DOUBLE_QUOTE_RAW_STRING => (<>,).into(),
    SINGLE_QUOTE_RAW_STRING => (<>,).into(),
}
AbsPath: ast::AbsPath<'input> = ABS_PATH => (<>,).into();
RelPath: ast::RelPath<'input> = REL_PATH => (<>,).into();
HomePath: ast::HomePath<'input> = HOME_PATH => (<>,).into();
LongOpt: ast::LongOpt<'input> = LONG_OPT => (<>,).into();
ShortOpt: ast::ShortOpt<'input> = SHORT_OPT => (<>,).into();
Natural: ast::Natural<'input> = NATURAL => (<>,).into();

Box<T>: Box<T> = T => Box::new(<>);

extern {
    type Location = usize;
    type Error = Error;
    enum Tok<'input> {
        "let"                       => Tok::Kwd         (lex::Kwd           ("let"          )   ),
        "val"                       => Tok::Kwd         (lex::Kwd           ("val"          )   ),
        "def"                       => Tok::Kwd         (lex::Kwd           ("def"          )   ),
        "="                         => Tok::Kwd         (lex::Kwd           ("="            )   ),
        "$"                         => Tok::Kwd         (lex::Kwd           ("$"            )   ),
        "\""                        => Tok::Kwd         (lex::Kwd           ("\""           )   ),
        ";"                         => Tok::Kwd         (lex::Kwd           (";"            )   ),
        "@"                         => Tok::Kwd         (lex::Kwd           ("@"            )   ),
        "<"                         => Tok::Kwd         (lex::Kwd           ("<"            )   ),
        ">"                         => Tok::Kwd         (lex::Kwd           (">"            )   ),
        "!"                         => Tok::Kwd         (lex::Kwd           ("!"            )   ),
        "{"                         => Tok::Kwd         (lex::Kwd           ("{"            )   ),
        "}"                         => Tok::Kwd         (lex::Kwd           ("}"            )   ),
        IDENT                       => Tok::Idnt        (lex::Idnt          (<&'input str>  )   ),
        IDENT_NO_EQ                 => Tok::IdntNe      (lex::IdntNe        (<&'input str>  )   ),
        ABS_PATH                    => Tok::AbsPath     (lex::AbsPath       (<&'input str>  )   ),
        REL_PATH                    => Tok::RelPath     (lex::RelPath       (<&'input str>  )   ),
        LONG_OPT                    => Tok::LongOpt     (lex::LongOpt       (<&'input str>  )   ),
        SHORT_OPT                   => Tok::ShortOpt    (lex::ShortOpt      (<&'input str>  )   ),
        DOUBLE_QUOTE_RAW_STRING     => Tok::RawString   (lex::RawString     (<&'input str>  )   ),
        SINGLE_QUOTE_RAW_STRING     => Tok::RawString   (lex::RawString     (<&'input str>  )   ),
        NATURAL                     => Tok::Natural     (lex::Natural       (<&'input str>  )   ),

        // IDENT            r"[a-zA-Z_][a-zA-Z0-9:.,_=/-]*"
        // IDENT_NO_EQ      r"[a-zA-Z_][a-zA-Z0-9:.,_/-]*"
        // ABS_PATH         r"/[a-zA-Z0-9:.,_=/-]*"
        // REL_PATH         r"\./[a-zA-Z0-9:.,_=/-]*"
        // LONG_OPT         r"--[a-zA-Z0-9:.,_=/-]*"
        // SHORT_OPT        r"-[a-zA-Z0-9:.,_=/-]*"
        // DOUBLE_QUOTE_RAW_STRING  r#""[^"]*""#
        // SINGLE_QUOTE_RAW_STRING  r#"'[^']*'"#

        // r"~/[a-zA-Z0-9:.,_=/-]*"
        HOME_PATH               => Tok::Nada ( lex::Nada ( <&'input str> ) ),
        // r"#.*"
        DOC_COMMENT             => Tok::Nada ( lex::Nada ( <&'input str> ) ),
        // r"[a-zA-Z0-9:.,_=+/-]*"
        WORD                    => Tok::Nada ( lex::Nada ( <&'input str> ) ),
    }
}

//match {
//    "let",
//    "def",
//} else {
//    r"[a-zA-Z_][a-zA-Z0-9:.,_/-]*" => IDENT_NO_EQ,
//} else {
//    r"--[a-zA-Z0-9:.,_=/-]*" => LONG_OPT,
//    r"\./[a-zA-Z0-9:.,_=/-]*" => REL_PATH,
//    r"/[a-zA-Z0-9:.,_=/-]*" => ABS_PATH,
//    r"~/[a-zA-Z0-9:.,_=/-]*" => HOME_PATH,
//    r"[a-zA-Z_][a-zA-Z0-9:.,_=/-]*" => IDENT,
//    r#""[^"]*""# => DOUBLE_QUOTE_RAW_STRING,
//    r#"'[^']*'"# => SINGLE_QUOTE_RAW_STRING,
//    r"#.*" => DOC_COMMENT,
//    "=",
//    "$",
//    "\"",
//    ";",
//    "@",
//    "<",
//    ">",
//    "!",
//} else {
//    r"-[a-zA-Z0-9:.,_=/-]*" => SHORT_OPT,
//} else {
//    r"[a-zA-Z0-9:.,_=+/-]*" => WORD,
//}

