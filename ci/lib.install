# vim: et ft=scala ts=4 sw=4

def install::make_bin_release_tar = {
    !tar
        --create
        --verbose
        -C $INSTALL_PREFIX
        --file bin-release.tar
        bin/xs-compile
        bin/xs-run
        bin/xs-call
        bin/xs-debug
        bin/xs-write_in
        bin/xs-write_out
        bin/xs-make-self-exec
        bin/xsi-list-func
        include/dust
    ;
}

def install::build = {
    !cargo
        --color always
        build
        --release
        --bin xs-compile
        --bin xs-run
        --bin xs-call
        --bin xs-debug
        --bin xs-make-self-exec
        --bin xs-write_out
        --bin xsi-list-func
}

def install::system-bin = {
    let srce = p target/release/ $args;
    let dest = p $INSTALL_PREFIX /bin/ $args;

    !sudo cp -av $srce $dest;
    !sudo chown -v root:root $dest;
}

def install::system-file = {
    let srce = p $args;
    let dest = p $INSTALL_PREFIX / $args;

    src dirname = !dirname $dest;
    src _ = !tr <$dirname -d "\n";
    !sudo mkdir -p $_;

    !sudo cp -av $srce $dest;
    !sudo chown -v root:root $dest;
}

def install::system-bin-alias = {
    let arg1 = arg_get 1 $args;
    let arg2 = arg_get 2 $args;

    src source = p $INSTALL_PREFIX /bin/ $arg1;
    src destin = p $INSTALL_PREFIX /bin/ $arg2;

    !sudo ln -fsv $source $destin;
}

def install::system = {
    install::build;

    def i = install::system-bin $args;
    i xs-run;
    i xs-call;
    i xs-compile;
    i xs-debug;
    i xs-make-self-exec;
    i xs-write_out;
    i xs2;
    i xsi-list-func;

    def a = install::system-bin-alias $args;
    a xs-write_out xs-write_in;
}

def install::lib = {
    def f = install::system-file $args;
    f include/dust/std;
    f include/dust/lib.term;
    f include/dust/lib.ux;
    f include/dust/lib.ide;
    f include/dust/lib.term;
    f include/dust/lib.docker;
    f include/dust/std;
    f include/dust/sys;
}
