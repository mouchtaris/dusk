# vim: et ft=scala ts=4 sw=4

def install::make_bin_release_tar = {
    !tar
        --create
        -C $_INSTALL_PREFIX
        --file bin-release.tar
        bin/xs-compile
        bin/xs-decompile
        bin/xs-run
        bin/xs-call
        bin/xs-debug
        bin/xs-write_in
        bin/xs-write_out
        bin/xs-make-self-exec
        bin/xsi-list-func
        include/dust
    ;
}

def install::build = {
    !cargo
        --color always
        build
        --release
        --bin xs-compile
        --bin xs-decompile
        --bin xs-run
        --bin xs-call
        --bin xs-debug
        --bin xs-make-self-exec
        --bin xs-write_out
        --bin xsi-list-func
        --bin xs2
    ;
}

def install::root_file = {
    let srce = arg_get 1 $args;
    let dest = arg_get 2 $args;
    !sudo cp -av $srce $dest;
    !sudo chown root:root $dest;
}

def install::user_file = {
    !cp -av $args;
}

def install::root_parentdir = {
    src _ = dirname $args;
    !sudo mkdir -p $_;
}

def install::user_parentdir = {
    src _ = dirname $args;
    !mkdir -p $_;
}


def _srce = p target/release/ $args;
def _dest = p $_INSTALL_PREFIX /bin/ $args;

def install::system-bin = {
    let srce = _srce $args;
    let dest = _dest $args;

    install::root_file $srce $dest;
}

def install::local-bin = {
    let srce = _srce $args;
    let dest = _dest $args;

    install::user_file $srce $dest;
}

def install::compile-dustbin =
    !xs-make-self-exec
        <(!xs-compile (p bin/ $args))
        -
        (p "#!" $_INSTALL_PREFIX "/bin/xs-run")
;

def install::system-dustbin = {
    src target = _dest $args;
    src bin = install::compile-dustbin $args;

    install::root_parentdir $target;
    !sudo <$bin xs-write_in $target;
    !sudo chmod -v 755 $target;
}

def install::local-dustbin = {
    src target = _dest $args;
    src bin = install::compile-dustbin $args;

    install::user_parentdir $target;
    !xs-write_in <$bin $target;
    !chmod -v 755 $target;
}

def _srce = p $args;
def _dest = p $_INSTALL_PREFIX / $args;

def install::system-file = {
    let srce = _srce $args;
    let dest = _dest $args;

    install::root_parentdir $dest;
    install::root_file $srce $dest;
}

def install::local-file = {
    let srce = _srce $args;
    let dest = _dest $args;

    install::user_parentdir $dest;
    install::user_file $srce $dest;
}

def install::system-bin-alias = {
    let arg1 = arg_get 1 $args;
    let arg2 = arg_get 2 $args;

    src source = p $_INSTALL_PREFIX /bin/ $arg1;
    src destin = p $_INSTALL_PREFIX /bin/ $arg2;

    !sudo ln -fsv $source $destin;
}

def install::local-bin-alias = {
    let arg1 = arg_get 1 $args;
    let arg2 = arg_get 2 $args;

    src source = p $_INSTALL_PREFIX /bin/ $arg1;
    src destin = p $_INSTALL_PREFIX /bin/ $arg2;

    !ln -fsv $source $destin;
}

def install::system = {
    install::build;

    def i = install::system-bin $args;
    i xs-run;
    i xs-call;
    i xs-compile;
    i xs-decompile;
    i xs-debug;
    i xs-make-self-exec;
    i xs-write_out;
    i xs2;
    i xsi-list-func;

    def a = install::system-bin-alias $args;
    a xs-write_out xs-write_in;

    def d = install::system-dustbin $args;
    d dusk-ctrl-here;
    d dake;
}

def install::local = {
    install::build;

    def i = install::local-bin $args;
    i xs-run;
    i xs-call;
    i xs-compile;
    i xs-decompile;
    i xs-debug;
    i xs-make-self-exec;
    i xs-write_out;
    i xs2;
    i xsi-list-func;

    def a = install::local-bin-alias $args;
    a xs-write_out xs-write_in;

    def d = install::local-dustbin $args;
    d dusk-ctrl-here;
    d dake;
}

def install::lib = {
    def f = install::system-file $args;
    f include/dust/hashi;
    f include/dust/docker;
    f include/dust/package;
    f include/dust/lib.docker;
    f include/dust/lib.ide;
    f include/dust/lib.ux;
    f include/dust/lib.term;
    f include/dust/lib.std;
    f include/dust/lib.core;
    f include/dust/std;
    f include/dust/sys;
}

def install::local-lib = {
    def f = install::local-file $args;
    f include/dust/hashi;
    f include/dust/docker;
    f include/dust/package;
    f include/dust/lib.docker;
    f include/dust/lib.ide;
    f include/dust/lib.ux;
    f include/dust/lib.term;
    f include/dust/lib.std;
    f include/dust/lib.core;
    f include/dust/std;
    f include/dust/sys;
}

def uninstall::local = {
    def bin = p $_INSTALL_PREFIX / bin / $args;

    src include_ = p $_INSTALL_PREFIX "/include/dust";
    src lib = p $_INSTALL_PREFIX "/lib/dust";

    src xs2 = bin xs2;
    src xs-compile = bin xs-compile;
    src xs-decompile = bin xs-decompile;
    src xs-run = bin xs-run;
    src xs-debug = bin xs-debug;
    src xs-make-self-exec = bin xs-make-self-exec;
    src xs-call = bin xs-call;
    src xs-write_out = bin xs-write_out;
    src dusk-ctrl-here = bin dusk-ctrl-here;
    src dake = bin dake;

    !rm -rfv
        $include_
        $xs2
        $xs-compile
        $xs-decompile
        $xs-run
        $xs-debug
        $xs-make-self-exec
        $xs-call
        $xs-write_out
        $dusk-ctrl-here
        $dake
    ;
}

def uninstall::system = {
    def bin = p $_INSTALL_PREFIX / bin / $args;

    src include_ = p $_INSTALL_PREFIX "/include/dust";
    src lib = p $_INSTALL_PREFIX "/lib/dust";

    src xs2 = bin xs2;
    src xs-compile = bin xs-compile;
    src xs-decompile = bin xs-decompile;
    src xs-run = bin xs-run;
    src xs-debug = bin xs-debug;
    src xs-make-self-exec = bin xs-make-self-exec;
    src xs-call = bin xs-call;
    src xs-write_out = bin xs-write_out;
    src dusk-ctrl-here = bin dusk-ctrl-here;
    src dake = bin dake;

    !sudo rm -rfv
        $include_
        $xs2
        $xs-compile
        $xs-decompile
        $xs-run
        $xs-debug
        $xs-make-self-exec
        $xs-call
        $xs-write_out
        $dusk-ctrl-here
        $dake
    ;
}
