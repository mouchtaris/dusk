# vim: et ft=scala ts=4 sw=4

def _sql = {
    let script = p $args;
    !sqlite3 <$script -json $CONFIG
}

def config-init = {
    !rm -rfv $CONFIG;
    !mkdir -pv $CONFIG_DIR/;

    _sql r###"
    create table
        Config (
            name text unique on conflict fail,
            value text
        );
    insert into Config (name, value) values ("Initialized", "true");
    select * from Config;
    "###;
}

def config-get = {
    let script = fmt r###"
    select
        value
        from Config
        where name = "%s";
    "### $args;

    src json = _sql $script;
    !jq <$json
        --raw-output
        -j
        ".[].value"
}

def config-set = {
    let script = fmt r###"
    insert or replace
        into Config
        (name, value)
        values
            ("%s", "%s");
    "### $args;

    _sql $script
}

def config-json = {
    let script = " select * from Config";

    src json = !sqlite3 <$script -json $CONFIG;

    !jq <$json ".[] | [.value, .name]"
}

def config-load = {
    def json = !cat $CONFIG_FILE;

    ##
    ## FEATURE: foreach
    ## foreach !jq <$json "(.value, .name)" {
    ##     xs2 ci/ci config-set $args
    ## }

    def shell = !jq <$json --raw-output r##".
    |   . as [$name, $value]
    |   @json "!xs2 ci/ci config-set \($value) \($name);"
    "##;

    !cat <$shell
}
